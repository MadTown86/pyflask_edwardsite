{% extends "./base.jinja" %}
{% block content %}
<script>
    document.getElementById('member_nav').classList.add('active')
    document.getElementById('member_nav').classList.add('text-light')
    const nowDateTime = new Intl.DateTimeFormat('en-US').format(new Date())
    console.log('NOWDATETIME:', nowDateTime)
    currentTime = new Date()
    const nowTimeString = currentTime.toLocaleTimeString('en-US', {hour: '2-digit', minute: '2-digit', hour12: true})
    console.log('NOWTIME:', nowTimeString)
    

    // Function to render timeslots
    // Render the timeslots for initial day perhaps for all
    function renderTimeslots(date, timeslots, busyTimeslots=[], appointments={}) {
      const now = new Date();
      console.log('NOW:', now);
      console.log('DATE:', date);
      console.log('BUSY TIMESLOTS:', busyTimeslots);
      console.log('TIMESLOTS:', timeslots);
      console.log('APPOINTMENTS:', appointments);
      console.log('date === now.toLocaleDateString():', date === now.toLocaleDateString());
      if (date === now.toLocaleDateString()) {
        for (let i = 0; i < timeslots.length; i++) {
          let renderedTime = convertTimeSlotTime(timeslots[i]);
          console.log('TIMESLOT:', typeof(timeslots[i]));
          if (timeslots[i] in busyTimeslots) {
            document.getElementById('listGroupRadioGrid_' + timeslots[i]).disabled = true;
          } else if (renderedTime < now) {
            document.getElementById('listGroupRadioGrid_' + timeslots[i]).disabled = true;
          } else if (Object.keys(appointments).length !== 0) {
            console.log('APPOINTMENTS:', appointments);
            for (let i = 0; i < Object.keys(appointments).length ; i++) {
              if (date === appointments.date && timeslots[i] === appointments.time) {
                document.getElementById('listGroupRadioGrid_' + timeslots[i]).disabled = true;
          }
            }
          } else {
            document.getElementById('listGroupRadioGrid_' + timeslots[i]).disabled = false;
          }
        }
    } else {
        for (let i = 0; i < timeslots.length; i++) {
          let renderedTime = convertTimeSlotTime(timeslots[i]);
          console.log('TIMESLOT:', timeslots[i]);
          console.log('RENDERED TIME:', renderedTime);
          console.log('Busy Timeslots', busyTimeslots);
          console.log('IS TIMESLOT IN BUSY:', timeslots[i] in busyTimeslots);
            if (timeslots[i] in busyTimeslots) {
              document.getElementById('listGroupRadioGrid_' + timeslots[i]).disabled = true;
            } else {
              document.getElementById('listGroupRadioGrid_' + timeslots[i]).disabled = false;
            }
      }
    }
    }
    const appointments = {{ json_appts | tojson }};

    // Cycle to next schedule date, update timeslots
    function nextClick() {
      //Date Portion
      const nowDate = new Date()
      const dateFromH2 = document.getElementById('date').innerText
      const newDate = new Date(dateFromH2)
      const oneDayMilliseconds = 86400000
      const timeDifference = Math.abs(nowDate - newDate)

      console.log('ORGJAVADATE:', nowDate)
      console.log('NEWDATE:', newDate)
      if (timeDifference > 10 * oneDayMilliseconds) {

      } else {
        document.getElementById('next-date-button').disabled = false
        newDate.setDate(newDate.getDate()+1)
        const dateFormatted = new Intl.DateTimeFormat('en-US').format(newDate)
        document.getElementById('date').innerText = dateFormatted
        document.getElementById('hidden_date').value = dateFormatted
      }
      const hiddenDate = document.getElementById('hidden_date').value
      console.log(hiddenDate)

      //Time Portion
      const timeslots = document.getElementsByName('listGroupRadioGrid')
      const busyTimeSlotsDict = {{ json_appts }}
      const orgDateKeys = []
      const formattedDateKeys = []

      // Get the keys of the busyTimeSlotsDict
      for (const [key, value] of Object.entries(busyTimeSlotsDict)) {
        orgDateKeys.push(key)
      }

      // Format the keys of the busyTimeSlotsDict
      for (let i = 0; i < orgDateKeys.length; i++) {
        const formattedDate = new Intl.DateTimeFormat('en-US').format(new Date(orgDateKeys[i]))
        formattedDateKeys.push(formattedDate)
      }

      // Disable the timeslots that are already booked
      console.log('MADE IT HERE NEXTCLICK')
      renderTimeslots(hiddenDate, {{ timeslots | tojson }}, busyTimeSlotsDict[orgDateKeys[formattedDateKeys.indexOf(hiddenDate)]],);
      console.log('MADE IT HERE NEXTCLICK AFTER')
    }

    // Cycle to previous schedule date, update timeslots
    function prevClick() {
      const orgDate = '{{date}}'
      const orgJavaDate = new Date(orgDate)
      const dateFromH2 = document.getElementById('date').innerText
      const newDate2 = new Date(dateFromH2)
      newDate2.setDate(newDate2.getDate()-1)
      const timeDifference2 = newDate2 - orgJavaDate
      console.log('ORG DATE:', orgJavaDate)

      // Check to see if html date is == to orgDate, then disable rest of code
      if (timeDifference2 < 0) {
      } else {
        document.getElementById('prev-date-button').disabled = false // Enable the button
        const dateFormatted = new Intl.DateTimeFormat('en-US').format(newDate2) // Format the date
        document.getElementById('date').innerText = dateFormatted // Update the visual date
        document.getElementById('hidden_date').value = dateFormatted // Update the hidden date
      }
      const hiddenDate = document.getElementById('hidden_date').value
      console.log(hiddenDate)

      //Time Portion
      const timeslots = document.getElementsByName('listGroupRadioGrid')
      const busyTimeSlotsDict = {{ json_appts }}
      const orgDateKeys = []
      const formattedDateKeys = []

      // Get the keys of the busyTimeSlotsDict
      for (const [key, value] of Object.entries(busyTimeSlotsDict)) {
        orgDateKeys.push(key)
      }

      // Format the keys of the busyTimeSlotsDict
      for (let i = 0; i < orgDateKeys.length; i++) {
        const formattedDate = new Intl.DateTimeFormat('en-US').format(new Date(orgDateKeys[i]))
        formattedDateKeys.push(formattedDate)
      }

      // Disable the timeslots that are already booked
      
      renderTimeslots(hiddenDate, {{ timeslots | tojson }}, busyTimeSlotsDict[orgDateKeys[formattedDateKeys.indexOf(hiddenDate)]],);
    }  

        // Render confirmation box upon click
    function confirmBox() {
      if (window.confirm('Are you sure you want to confirm this appointment?')) {
        confirmClick();
      } else {
        console.log('Appointment not confirmed');
      }
      
    }
    // Confirm the appointment when 'OK' is clicked
    function confirmClick() {
      const userId = '{{ session.user.id }}';
      const date = document.getElementById('hidden_date').value;
      const trainer = document.getElementById('hidden_trainer').value;
      console.log('DATE IN CONFIRM CLICK:', date);
      let time = '';
      const radioButtons = document.getElementsByName('listGroupRadioGrid');
      for (let i = 0; i < radioButtons.length; i++) {
        if (radioButtons[i].checked) {
          time = radioButtons[i].value;
          break;
        }
      }
      const data = {
        userId: userId,
        date: date,
        time: time,
        trainer_id: trainer
      };
      // Send the data to the server
      fetch(`/schedule/${trainer}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(data => {
        console.log('Success:', data);
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }



    // Convert the timeslot time to a Date object for comparison
    function convertTimeSlotTime(time) {
      const [timeslot, modifier] = time.split(' ');
      let [hours, minutes] = timeslot.split(':').map(Number);
      const timeSlotTime = new Date();
      if (hours === 12) {
        hours = 0;
      }
      if (modifier === 'PM') {
        hours += 12;
      }
      timeSlotTime.setHours(hours, minutes, 0, 0);
      console.log(timeSlotTime);
      return timeSlotTime;
    }


</script>
    <main>
    {# Pull Messages and Post Messages Sent From Server #}
    {# Render Timeslots #}
    {% if trainer %}
    <h1 class="text-center">Schedule With: {{trainer.name}}</h1>
    {% endif %}
    {% if timeslots and date %}
      <h1 class="text-center">Schedule</h1>
        <div class="d-flex justify-content-center schedule">
        <button id="prev-date-button" onclick="prevClick()"><span>&#8592</span></button>
        <h2 class="text-center" id="date">{{date}}</h2>
        <button id="next-date-button" onclick="nextClick()"><span>&#8594</span></button>
        </div>
      <form>
        <input type="hidden" name="hidden_date" id="hidden_date" value="{{date}}">
        <input type="hidden" name="hidden_trainer" id="hidden_trainer" value="{{trainer.id}}">
          <div class="d-flex flex-column flex-md-row p-4 gap-4 py-md-5 align-items-center justify-content-center">
            <div class="list-group list-group-radio d-grid gap-2 border-0">
              {% for timeslot in timeslots %}
                {% if timeslot in busy_today %}
                {% if loop.index == 1 %}
                    <div class="position-relative">
                    <input class="form-check-input position-absolute top-50 end-0 me-3 fs-5" type="radio" name="listGroupRadioGrid" id="listGroupRadioGrid_{{timeslot}}" value="{{timeslot}}" checked="" disabled="">
                    <label class="list-group-item rounded-3 py-3 pe-5" for="listGroupRadioGrid_{{timeslot}}">
                      <strong class="fw-semibold">{{ timeslot }}</strong>
                    </label>
                  </div>
                  {% else %}
                  <div class="position-relative">
                    <input class="form-check-input position-absolute top-50 end-0 me-3 fs-5" type="radio" name="listGroupRadioGrid" id="listGroupRadioGrid_{{timeslot}}" value="{{timeslot}}" disabled="">
                    <label class="list-group-item rounded-3 py-3 pe-5" for="listGroupRadioGrid_{{timeslot}}">
                      <strong class="fw-semibold">{{ timeslot }}</strong>
                    </label>
                  </div>
                  {% endif %}
                {% else %}
                  {% if loop.index == 1 %}
                    <div class="position-relative">
                    <input class="form-check-input position-absolute top-50 end-0 me-3 fs-5" type="radio" name="listGroupRadioGrid" id="listGroupRadioGrid_{{timeslot}}" value="{{timeslot}}" checked="">
                    <label class="list-group-item rounded-3 py-3 pe-5" for="listGroupRadioGrid_{{timeslot}}">
                      <strong class="fw-semibold">{{ timeslot }}</strong>
                    </label>
                  </div>
                  {% else %}
                  <div class="position-relative">
                    <input class="form-check-input position-absolute top-50 end-0 me-3 fs-5" type="radio" name="listGroupRadioGrid" id="listGroupRadioGrid_{{timeslot}}" value="{{timeslot}}">
                    <label class="list-group-item rounded-3 py-3 pe-5" for="listGroupRadioGrid_{{timeslot}}">
                      <strong class="fw-semibold">{{ timeslot }}</strong>
                    </label>
                  </div>
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% endif %}
          {# Perform confirmation action upon button click #}
          <button class="btn btn-primary rounded-pill px-3" type="confirm" onclick="confirmBox()">Confirm</button>
          </div>
        </div>
      </form>
    <script>
    // Initial rendering of timeslots upon first load of page
    renderTimeslots('{{ date }}', {{ timeslots | tojson }}, {{ busy_today | tojson }}, {{ json_appts | tojson }});
    </script>
</main>
{% endblock content %}